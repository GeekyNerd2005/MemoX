(()=>{var e=globalThis,t={},o={},n=e.parcelRequirea888;null==n&&((n=function(e){if(e in t)return t[e].exports;if(e in o){var n=o[e];delete o[e];var r={id:e,exports:{}};return t[e]=r,n.call(r.exports,r,r.exports),r.exports}var c=Error("Cannot find module '"+e+"'");throw c.code="MODULE_NOT_FOUND",c}).register=function(e,t){o[e]=t},e.parcelRequirea888=n),(0,n.register)("eYEwQ",function(e,t){(async()=>{let e="";if("www.youtube.com"===window.location.hostname&&window.location.pathname.includes("/watch")){console.log("Attempting to get YouTube transcript...");let t=document.querySelector("#segmented-like-button + #top-level-buttons-computed > ytd-toggle-button-renderer:nth-child(2) > yt-button-shape > button > yt-touch-feedback-shape > div > div.yt-spec-touch-feedback-shape__fill");if(t){t.click(),await new Promise(e=>setTimeout(e,1e3));let o=document.querySelector("ytd-engagement-panel-section-list-renderer[target-id='engagement-panel-transcript'] #segments-container");o?(e=Array.from(o.querySelectorAll(".segment-text.style-scope.ytd-transcript-segment-renderer")).map(e=>e.textContent?.trim()).join(" "),console.log("YouTube transcript extracted.")):console.log("Transcript container not found, falling back to general content.")}else console.log("YouTube transcript button not found, falling back to general content.")}if(!e){console.log("Attempting to get general page content...");let t=document.querySelector("article")||document.querySelector("main")||document.querySelector(".post-content")||document.querySelector(".entry-content")||document.body;if(t){let o=t.cloneNode(!0);o.querySelectorAll("script, style, noscript").forEach(e=>e.remove()),e=(e=o.textContent?.trim()||"").replace(/\s+/g," ").trim(),console.log("General page content extracted.")}else console.log("No article-like content found.")}chrome.runtime.sendMessage({type:"PAGE_CONTENT",content:e})})()}),n("eYEwQ")})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJtYXBwaW5ncyI6InVZLEMsVSxJLEUsRyxHLG9CLE8sUSxDLFEsRSxPLFEsQyxRLEMsUSxDLFUsQyxRLEcsQywyQyxJLEUsUyxhLEMsc00sRyxFLEMsRSxLLEcsTSxJLFEsRyxXLEUsTSxFLEUsRSxTLGEsQyxHLHdHLEcsRSxNLEksQyxBLEUsRyxhLEMsOEQsRyxDLEcsRSxXLEUsUSxJLEMsSyxRLEcsQyxrQyxRLEcsQyxtRSxNLFEsRyxDLHdFLEMsRyxDLEUsQyxRLEcsQyw2QyxJLEUsUyxhLEMsWUFBQSxTQUFBLGFBQUEsQ0FBQSxTQUVDLFNBQUEsYUFBQSxDQUFBLGtCQUNLLFNBQUosYUFBQSxDQUFBLG1CQUVBLFNBQUEsSUFBQSxDQUVFLENBRkYsRUFFRSxFQUFRLENBRVIsSUFBQSxFQUFBLEVBQUEsTUFKRixHQUlFLEVBQUEsR0FDQSxFQUFBLGdCQUFBLENBQUEsMkJBQUEsT0FBQSxDQUFBLEdBQUEsRUFBQSxNQUFBLElBS0UsRUFBTSxDQUpSLEVBQU0sRUFBbUIsV0FBUyxFQUFBLFFBQWxDLEVBQUEsRUFJb0IsT0FBQSxDQUFBLE9BQVcsS0FBVyxJQUFBLEdBRXhDLFFBQUEsR0FBQSxDQUFNLGtDQUVOLE1BQ0UsUUFBQSxHQUFBLENBQUEsaUNBRUEsQ0FPTixPQUFBLE9BQUEsQ0FBQSxXQUFBLENBQUEsQ0FBQSxLQUFBLGVBQUEsUUFBQSxDQUFBLEdBRUEsQ0FBQSIsInNvdXJjZXMiOlsic3JjL2NvbnRlbnQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gY29udGVudC5qc1xuXG4oYXN5bmMgKCkgPT4ge1xuICBsZXQgcGFnZUNvbnRlbnQgPSBcIlwiO1xuXG4gIC8vIENoZWNrIGlmIGl0J3MgYSBZb3VUdWJlIHZpZGVvIHBhZ2VcbiAgaWYgKHdpbmRvdy5sb2NhdGlvbi5ob3N0bmFtZSA9PT0gXCJ3d3cueW91dHViZS5jb21cIiAmJiB3aW5kb3cubG9jYXRpb24ucGF0aG5hbWUuaW5jbHVkZXMoXCIvd2F0Y2hcIikpIHtcbiAgICBjb25zb2xlLmxvZyhcIkF0dGVtcHRpbmcgdG8gZ2V0IFlvdVR1YmUgdHJhbnNjcmlwdC4uLlwiKTtcbiAgICAvLyBBdHRlbXB0IHRvIGZpbmQgdGhlIHRyYW5zY3JpcHQgYnV0dG9uIGFuZCBjbGljayBpdFxuICAgIC8vIFRoaXMgcGFydCBjYW4gYmUgYnJpdHRsZSBpZiBZb3VUdWJlIGNoYW5nZXMgaXRzIFVJLlxuICAgIC8vIEEgbW9yZSByb2J1c3Qgc29sdXRpb24gbWlnaHQgaW52b2x2ZSBvYnNlcnZpbmcgRE9NIGNoYW5nZXMgb3IgdXNpbmcgWW91VHViZSdzIEFQSSBpZiBhdmFpbGFibGUgdG8gZXh0ZW5zaW9ucy5cbiAgICBjb25zdCB0cmFuc2NyaXB0QnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNzZWdtZW50ZWQtbGlrZS1idXR0b24gKyAjdG9wLWxldmVsLWJ1dHRvbnMtY29tcHV0ZWQgPiB5dGQtdG9nZ2xlLWJ1dHRvbi1yZW5kZXJlcjpudGgtY2hpbGQoMikgPiB5dC1idXR0b24tc2hhcGUgPiBidXR0b24gPiB5dC10b3VjaC1mZWVkYmFjay1zaGFwZSA+IGRpdiA+IGRpdi55dC1zcGVjLXRvdWNoLWZlZWRiYWNrLXNoYXBlX19maWxsXCIpO1xuXG4gICAgaWYgKHRyYW5zY3JpcHRCdXR0b24pIHtcbiAgICAgIHRyYW5zY3JpcHRCdXR0b24uY2xpY2soKTtcbiAgICAgIGF3YWl0IG5ldyBQcm9taXNlKHJlc29sdmUgPT4gc2V0VGltZW91dChyZXNvbHZlLCAxMDAwKSk7IC8vIFdhaXQgZm9yIHRyYW5zY3JpcHQgdG8gbG9hZFxuXG4gICAgICBjb25zdCB0cmFuc2NyaXB0Q29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcInl0ZC1lbmdhZ2VtZW50LXBhbmVsLXNlY3Rpb24tbGlzdC1yZW5kZXJlclt0YXJnZXQtaWQ9J2VuZ2FnZW1lbnQtcGFuZWwtdHJhbnNjcmlwdCddICNzZWdtZW50cy1jb250YWluZXJcIik7XG5cbiAgICAgIGlmICh0cmFuc2NyaXB0Q29udGFpbmVyKSB7XG4gICAgICAgIGNvbnN0IHRyYW5zY3JpcHRTZWdtZW50cyA9IHRyYW5zY3JpcHRDb250YWluZXIucXVlcnlTZWxlY3RvckFsbChcIi5zZWdtZW50LXRleHQuc3R5bGUtc2NvcGUueXRkLXRyYW5zY3JpcHQtc2VnbWVudC1yZW5kZXJlclwiKTtcbiAgICAgICAgcGFnZUNvbnRlbnQgPSBBcnJheS5mcm9tKHRyYW5zY3JpcHRTZWdtZW50cykubWFwKHNlZ21lbnQgPT4gc2VnbWVudC50ZXh0Q29udGVudD8udHJpbSgpKS5qb2luKFwiIFwiKTtcbiAgICAgICAgY29uc29sZS5sb2coXCJZb3VUdWJlIHRyYW5zY3JpcHQgZXh0cmFjdGVkLlwiKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiVHJhbnNjcmlwdCBjb250YWluZXIgbm90IGZvdW5kLCBmYWxsaW5nIGJhY2sgdG8gZ2VuZXJhbCBjb250ZW50LlwiKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgY29uc29sZS5sb2coXCJZb3VUdWJlIHRyYW5zY3JpcHQgYnV0dG9uIG5vdCBmb3VuZCwgZmFsbGluZyBiYWNrIHRvIGdlbmVyYWwgY29udGVudC5cIik7XG4gICAgfVxuICB9XG5cbiAgLy8gSWYgbm8gWW91VHViZSB0cmFuc2NyaXB0IG9yIG5vdCBhIFlvdVR1YmUgcGFnZSwgdHJ5IHRvIGdldCBhcnRpY2xlIGNvbnRlbnRcbiAgaWYgKCFwYWdlQ29udGVudCkge1xuICAgIGNvbnNvbGUubG9nKFwiQXR0ZW1wdGluZyB0byBnZXQgZ2VuZXJhbCBwYWdlIGNvbnRlbnQuLi5cIik7XG4gICAgLy8gUHJpb3JpdGl6ZSBjb21tb24gYXJ0aWNsZSBlbGVtZW50c1xuICAgIGNvbnN0IGFydGljbGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiYXJ0aWNsZVwiKSB8fFxuICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwibWFpblwiKSB8fFxuICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnBvc3QtY29udGVudFwiKSB8fFxuICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmVudHJ5LWNvbnRlbnRcIikgfHxcbiAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuYm9keTsgLy8gRmFsbGJhY2sgdG8gYm9keVxuXG4gICAgaWYgKGFydGljbGUpIHtcbiAgICAgIC8vIENsZWFuIHVwIHNjcmlwdCBhbmQgc3R5bGUgdGFncyBmb3IgY2xlYW5lciB0ZXh0XG4gICAgICBjb25zdCBjbG9uZWRBcnRpY2xlID0gYXJ0aWNsZS5jbG9uZU5vZGUodHJ1ZSk7XG4gICAgICBjbG9uZWRBcnRpY2xlLnF1ZXJ5U2VsZWN0b3JBbGwoXCJzY3JpcHQsIHN0eWxlLCBub3NjcmlwdFwiKS5mb3JFYWNoKGVsID0+IGVsLnJlbW92ZSgpKTtcbiAgICAgIHBhZ2VDb250ZW50ID0gY2xvbmVkQXJ0aWNsZS50ZXh0Q29udGVudD8udHJpbSgpIHx8IFwiXCI7XG5cbiAgICAgIC8vIEJhc2ljIGNsZWFudXA6IHJlbW92ZSBleGNlc3NpdmUgd2hpdGVzcGFjZSBhbmQgbmV3bGluZXNcbiAgICAgIHBhZ2VDb250ZW50ID0gcGFnZUNvbnRlbnQucmVwbGFjZSgvXFxzKy9nLCAnICcpLnRyaW0oKTtcbiAgICAgIGNvbnNvbGUubG9nKFwiR2VuZXJhbCBwYWdlIGNvbnRlbnQgZXh0cmFjdGVkLlwiKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc29sZS5sb2coXCJObyBhcnRpY2xlLWxpa2UgY29udGVudCBmb3VuZC5cIik7XG4gICAgfVxuICB9XG5cbiAgLy8gU2VuZCB0aGUgZXh0cmFjdGVkIGNvbnRlbnQgYmFjayB0byB0aGUgZXh0ZW5zaW9uIHBvcHVwXG4gIGNocm9tZS5ydW50aW1lLnNlbmRNZXNzYWdlKHsgdHlwZTogXCJQQUdFX0NPTlRFTlRcIiwgY29udGVudDogcGFnZUNvbnRlbnQgfSk7XG59KSgpOyJdLCJuYW1lcyI6W10sInZlcnNpb24iOjMsImZpbGUiOiJjb250ZW50LkhBU0hfUkVGX2FiZWU4OWZmMzdjMWI5MTQuanMubWFwIn0=
